NOP:
    descr: "Do nothing."
    opcode: 1
    size: "Byte"

MOV:
    descr: "Move value from rs to rd."
    opcode: 2
    size: "Word"
    fields:
        rs: [8, 15]
        rd: [16, 23]

MOV.IMM.I32:
    descr: "Move i32 immediate to rd."
    opcode: 3
    fields:
        rd: [8, 15]
        imm_i32:
            is_signed: true
            bits: [32, 63]

MOV.IMM.F:
    descr: "Move float immediate to rd."
    opcode: 4
    fields:
        rd: [8, 15]
        imm_f: [32, 63]

LDA:
    descr: "Load value from rs to acc."
    opcode: 5
    size: "HWord"
    fields:
        rs: [8, 15]

LDA.IMM.I32:
    descr: "Load i32 immediate to acc."
    opcode: 6
    fields:
        imm_i32:
            is_signed: true
            bits: [32, 63]

LDA.IMM.F:
    descr: "Load float immediate to acc."
    opcode: 7
    fields:
        imm_f: [32, 63]

STA:
    descr: "Store value from acc to rd."
    opcode: 8
    size: "HWord"
    fields:
        rd: [8, 15]

ADD.I32:
    descr: "acc = (acc as i32) + (rs as i32)"
    opcode: 9
    size: "HWord"
    fields:
        rs: [8, 15]

ADD.F:
    descr: "acc = (acc as float) + (rs as float)"
    opcode: 10
    size: "HWord"
    fields:
        rs: [8, 15]

SUB.I32:
    descr: "acc = (acc as i32) - (rs as i32)"
    opcode: 11
    size: "HWord"
    fields:
        rs: [8, 15]

SUB.F:
    descr: "acc = (acc as float) - (rs as float)"
    opcode: 12
    size: "HWord"
    fields:
        rs: [8, 15]

DIV.I32:
    descr: "acc = (acc as i32) / (rs as i32)"
    opcode: 13
    size: "HWord"
    fields:
        rs: [8, 15]

DIV.F:
    descr: "acc = (acc as float) / (rs as float)"
    opcode: 14
    size: "HWord"
    fields:
        rs: [8, 15]

MUL.I32:
    descr: "acc = (acc as i32) * (rs as i32)"
    opcode: 15
    size: "HWord"
    fields:
        rs: [8, 15]

MUL.F:
    descr: "acc = (acc as float) * (rs as float)"
    opcode: 16
    size: "HWord"
    fields:
        rs: [8, 15]

RET:
    descr: "Return from current frame. Return value is passed in acc"
    opcode: 17
    size: "Byte"

INTRINSIC:
    descr: "call intrinsic"
    opcode: 18
    gen_parser: false
    fields:
        intrinsic_code: [8, 23]
        intrinsic_arg_0: [32, 39]
        intrinsic_arg_1: [40, 47]
        intrinsic_arg_2: [48, 55]
        intrinsic_arg_3: [56, 63]

JUMP:
    descr: "pc = pc + offset"
    opcode: 19
    is_jump: true
    fields:
        jump_offset:
            is_signed: true
            bits: [8, 63]

JUMP.GG:
    descr: "acc > rs ? pc = pc + offset : pc = pc + 8"
    opcode: 20
    is_jump: true
    fields:
        rs: [8, 15]
        jump_offset:
            is_signed: true
            bits: [16, 63]

JUMP.EQ:
    descr: "acc == rs ? pc = pc + offset : pc = pc + 8"
    opcode: 21
    is_jump: true
    fields:
        rs: [8, 15]
        jump_offset:
            is_signed: true
            bits: [16, 63]

JUMP.LL:
    descr: "acc < rs ? pc = pc + offset : pc = pc + 8"
    opcode: 22
    is_jump: true
    fields:
        rs: [8, 15]
        jump_offset:
            is_signed: true
            bits: [16, 63]

CALL.0ARG:
    desct: "call function with no arguments"
    opcode: 23
    size: "Word"
    fields:
        func_id: [8, 31]

CALL.1ARG:
    desct: "call function with one argument"
    opcode: 24
    fields:
        func_id: [8, 31]
        func_arg0: [32, 39]

CALL.2ARG:
    desct: "call function with two arguments"
    opcode: 25
    fields:
        func_id: [8, 31]
        func_arg0: [32, 39]
        func_arg1: [40, 47]

CALL.3ARG:
    desct: "call function with three arguments"
    opcode: 26
    fields:
        func_id: [8, 31]
        func_arg0: [32, 39]
        func_arg1: [40, 47]
        func_arg2: [48, 55]

CALL.4ARG:
    desct: "call function with four arguments"
    opcode: 27
    fields:
        func_id: [8, 31]
        func_arg0: [32, 39]
        func_arg1: [40, 47]
        func_arg2: [48, 55]
        func_arg3: [56, 63]

I32TOF:
    descr: "acc = (acc as float)"
    opcode: 28
    size: "Byte"

FTOI32:
    descr: "acc = (acc as i32)"
    opcode: 29
    size: "Byte"

LDA.STR:
    desc: "Load string in accumulator."
    opcode: 30
    size: "Word"
    fields:
        str_id: [8, 23]

ARR.NEW.I32:
    descr: "Create new i32 array of size rs"
    opcode: 31
    size: "Word"
    fields:
        rd: [8, 15]
        rs: [16, 23]
        # dim: [24, 31]

ARR.NEW.F:
    descr: "Create new f array of size rs"
    opcode: 32
    size: "Word"
    fields:
        rd: [8, 15]
        rs: [16, 23]
        # dim: [24, 31]

ARR.LDA.I32:
    descr: "Load rs1[rs2] to acc"
    opcode: 33
    size: "Word"
    fields:
        rs1: [8, 15]
        rs2: [16, 23]

ARR.LDA.F:
    descr: "Load rs1[rs2] to acc"
    opcode: 34
    size: "Word"
    fields:
        rs1: [8, 15]
        rs2: [16, 23]

# ARR.LDA.REF

ARR.STA.I32:
    descr: "Store acc to rd[rs]"
    opcode: 35
    size: "Word"
    fields:
        rd: [8, 15]
        rs: [16, 23]

ARR.STA.F:
    descr: "Store acc to rd[rs]"
    opcode: 36
    size: "Word"
    fields:
        rd: [8, 15]
        rs: [16, 23]

# ARR.STA.REF

CMP.EQ.I32:
    desc: "acc == rs ? 1 : 0"
    opcode: 35
    size: "HWord"
    fields:
        rs: [8, 15]

CMP.GG.I32:
    desc: "acc > rs ? 1 : 0"
    opcode: 36
    size: "HWord"
    fields:
        rs: [8, 15]

CMP.LL.I32:
    desc: "acc < rs ? 1 : 0"
    opcode: 37
    size: "HWord"
    fields:
        rs: [8, 15]